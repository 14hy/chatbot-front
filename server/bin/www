const app = require(`../app`)
const debug = require(`debug`)(`server:server`)
const https = require(`https`)
const http = require(`http`)
const fs = require(`fs`)
const cors_proxy = require(`../lib/cors-anywhere`)

const webSocket = require(`./socket.js`)
const session = require(`express-session`)

const privateKey = fs.readFileSync(`/etc/nginx/private.key`, `utf8`)
const certificate = fs.readFileSync(`/etc/nginx/certificate.crt`, `utf8`)

const options = {
	key: privateKey,
	cert: certificate,
}

const host = process.env.HOST || `0.0.0.0`
const port = process.env.PORT || 8088

app.set(`port`, port)

const server = https.createServer(options, app)

const httpServer = http.createServer(app)

const serverProxy = cors_proxy.createServer({
	originWhitelist: [],
	requireHeader: [],
	removeHeaders: [`cookie`, `cookie2`],
	helpFile: `./views/index.html`,
	httpsOptions: options,
}).listen(8080, `0.0.0.0`, () => {
	console.info(`Running...`)
})

server.listen(port)
server.on(`error`, onError)
server.on(`listening`, onListening)

httpServer.listen(8089)
httpServer.on(`error`, onError)
httpServer.on(`listening`, onListening)

function normalizePort(val) {
	const port = parseInt(val, 10)

	if (isNaN(port)) {
		return val
	}

	if (port >= 0) {
		return port
	}

	return false
}

const sessionMiddleware = session({
	resave: false,
	saveUninitialized: false,
	secret: process.env.COOKIE_SECRET,
	cookie: {
		domain: `hanyang-chatbot.kro.kr`,
		httpOnly: false,
		secure: true,
	},
	name: `io-test`,
})

// app.use(sessionMiddleware)

webSocket(server, app, sessionMiddleware)

function onError(error) {
	if (error.syscall !== `listen`) {
		throw error
	}

	const bind = typeof port === `string`
		? `Pipe ${ port}`
		: `Port ${ port}`

	switch (error.code) {
	case `EACCES`:
		console.error(`${bind } requires elevated privileges`)
		process.exit(1)
		break
	case `EADDRINUSE`:
		console.error(`${bind } is already in use`)
		process.exit(1)
		break
	default:
		throw error
	}
}

function onListening() {
	const addr = server.address()
	const bind = typeof addr === `string`
		? `pipe ${ addr}`
		: `port ${ addr.port}`
	debug(`Listening on ${ bind}`)
}
